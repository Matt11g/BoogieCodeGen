{"instruction": "Write a Boogie procedure to add two integers.", "output": "procedure Add(x: int, y: int) returns (result: int)\nrequires true;\nensures result == x + y;\n{\n    result := x + y;\n}"}
{"instruction": "Create a Boogie procedure to check if a number is prime.", "output": "procedure IsPrime(n: nat) returns (result: bool)\n{\n    if n <= 1 then {\n        result := false;\n    } else if n == 2 then {\n        result := true;\n    } else {\n        result := true;\n        var i: nat := 2;\n        while (i * i <= n)\n        {\n            if (n % i == 0) {\n                result := false;\n                break;\n            }\n            i := i + 1;\n        }\n    }\n}"}
{"instruction": "Generate a Boogie procedure to calculate the factorial of a given natural number.", "output": "procedure Factorial(n: nat) returns (result: nat)\nrequires n <= 10;\nensures FactorialPostCondition(n, result);\n{\n    if (n == 0) {\n        result := 1;\n    } else {\n        result := n * Factorial(n - 1);\n    }\n}\n\npredicate FactorialPostCondition(n: nat, res: nat)\n{\n    res >= 1\n}"}